# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage:  Build
    jobs:
    - job: BuildSql
      steps:
        - bash: echo Bash SQL
        - bash:  ls -R $(Build.ArtifactStagingDirectory)
        # SQL not used
        # - bash:  ls -R $(System.DefaultWorkingDirectory)



    - job: BuildApi
      steps:
        - bash: echo Bash Api
        - bash: docker-compose build back
        - task: CopyFiles@2 
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: 'azure-pipelines.yml'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - bash:  ls -R $(Build.ArtifactStagingDirectory)
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'Api'
            publishLocation: 'Container'

    - job: BuildFront
      steps:
        - bash: echo Bash Front
        - bash: docker-compose build front
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: 'azure-pipelines.yml'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - bash:  ls -R $(Build.ArtifactStagingDirectory)
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'Front'
            publishLocation: 'Container'
    
  - stage:  DevDeploy
    dependsOn: Build
    jobs:
      - job: DeployDev
      - deployment: DevDeployJob
        environment: Dev
        strategy:
          runOnce:
            deploy:
              steps:
              - script: echo Deploy to Dev
# steps:
# - bash: echo Dev Deployment